version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/stock_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:8000/"]
      interval: 10s
      retries: 5
    restart: unless-stopped

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: stock_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d stock_db"]
      interval: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:6
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 3

  worker:
    build: ./backend
    command: sh -c "cd /app && celery -A app.celery worker --loglevel=info"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/stock_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/app
    restart: unless-stopped

  flower:
    build: ./backend
    command: sh -c "cd /app && celery -A app.celery flower --port=5555"
    depends_on:
      - redis
    ports:
      - "5555:5555"
    restart: unless-stopped

  frontend:
    build: ./frontend
    command: ["sh", "-c", "chmod +x /app/scripts/setup.sh && /app/scripts/setup.sh && npm run dev"]
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000
    restart: unless-stopped

volumes:
  pgdata:
